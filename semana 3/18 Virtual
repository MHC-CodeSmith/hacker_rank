#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

class Person {
protected:
    string name;
    int    age;
public:
    virtual void getdata() = 0;
    virtual void putdata() = 0;
    virtual ~Person() {}
};

class Professor : public Person {
    int publications;
    int id;
    static int next_id;           

public:
    Professor() {                 
        publications = 0;         
        next_id++;                
        id = next_id;             
    }

    void getdata() override {
        cin >> name >> age >> publications;
    }
    void putdata() override {
        cout << name << ' ' << age << ' '
             << publications << ' ' << id << '\n';
    }
};
int Professor::next_id = 0;

class Student : public Person {
    int marks[6];
    int id;
    static int next_id;

public:
    Student() {                   
    for (int i = 0; i < 6; ++i) {
        int &m = marks[i];  
        m = 0;              
    }
        next_id++;
        id = next_id;
    }

    void getdata() override {
        cin >> name >> age;
        for (int &m : marks) cin >> m;
    }
    void putdata() override {
        int total = 0;
        for (int m : marks) total += m;
        cout << name << ' ' << age << ' '
             << total << ' ' << id << '\n';
    }
};
int Student::next_id = 0;

int main(){

    int n, val;
    cin>>n; //The number of objects that is going to be created.
    Person *per[n];

    for(int i = 0;i < n;i++){

        cin>>val;
        if(val == 1){
            // If val is 1 current object is of type Professor
            per[i] = new Professor;

        }
        else per[i] = new Student; // Else the current object is of type Student

        per[i]->getdata(); // Get the data from the user.

    }

    for(int i=0;i<n;i++)
        per[i]->putdata(); // Print the required output for each object.

    return 0;

}
